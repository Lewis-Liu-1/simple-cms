<?php

	class folder_system
	{
		public $menus;
		private static $instance;
		
		function  __construct()
		{
         //echo 'Call the contrustor'.PHP_EOL;
			$this->menus=$this->populate_menus();
		}
		
		public static function singleton()
		{
			if (!isset(self::$instance)) {
            //echo 'Creating new instance.'.PHP_EOL;
            $className = __CLASS__;
            self::$instance = new $className;
        	}		
			return self::$instance;	
		}
		
		function populate_menus()
		{
			$absolute=RootDir.DataDir;
			$relative=DataDir;
			
			$ret=$this->populate_submenus($absolute,$relative);
			//print_r($ret);
			return $ret;
		}
		
		function populate_submenus($absolute,$relative)
		{
			$ret=array();
			$i=0;
         //echo "$absolute => $relative"."<br/>";
			
			if ($handle = opendir($absolute)) 
			{
		   	while (false !== ($file = readdir($handle))) 
		   	{
					if ($this->no_need_check($file)) continue;
					$s=$relative."/".$file;
					if (is_dir($absolute."/".$file))
					{
						$a=$absolute."/".$file;
						$r=$relative."/".$file;
						//$key=$this->translate(basename($s));
						if (strcmp($file,CommentDirName)!=0)
						{
							$ret[basename($s)]=$this->populate_submenus($a,$r);
						}
						//$ret[$s]=$this->translate($file);
					}
					else
					{
						$ret[$file]="file:".$i;
						$i++;
					}
			        			
				}
			   closedir($handle);
				$order = $this->read_order($relative);
	
				if (count($order) > 1)
				   $ret=$this->sortme($ret,$order);
			}
			return $ret;						
		}
		
		public function isIDExist($a,&$ret)
		{
			$ret=array();
			$ret=$this->menus;

			$check=$this->checkme($a,0,$ret);
			return $check;
		}
		
		private function checkme($seed,$index,&$src)
		{
			$temp=$src;
			foreach($temp as $key =>$value)
			{
				//echo "level =$index Seach $key<br/>";
				if (strcmp($key,$seed[$index])==0)
				{
					$src=$value;
					$index++;
					//have we search full path
					if ($index>=count($seed))
					{ 
						//echo "found";				
						return true;
					}
					if (is_array($value))
					{
						return $this->checkme($seed,$index,$src);
					}
					return false;
				}
				//not equal, keep search other items
			}
			//not found at this level, then fail	
			return false;
		}		
		
		public function isFile($a,&$filename)
		{
			$filename=implode("/", $a);
			$filename=RootDir.DataDir.'/'.$filename;
			
			if (is_dir($filename)) return false;
			//echo "File to show $f<br/>";
			return true;
		}
		
		function read_order($path)
		{
			$order=array();			 			
			$filename=RootDir.$path."/".IndexFileName;
			
			if (file_exists($filename)==false) return $order;
			$file = fopen($filename,"r");
						
			if ($file == false) return $order;
			//echo "read_order $filename<br/>";
			//Output a line of the file until the end is reached
			while(!feof($file))
  			{
  				$line=fgets($file);
  				if (strlen(trim($line))>0)
	  				$order[]=$line;
  			}
			fclose($file);
			return $order;			
		}
		
		function sortme($array,$order)
		{
			//var_dump($array);			
			$ret=array();
			foreach($order as $val)
			{
				foreach($array as $key =>$value)				
				//if (array_key_exists($val, $array)) 
				{
					if (strcasecmp(trim($key),trim($val))==0)
					{
						$ret[$key]=$value;
						unset($array[$key]);
					}
				//	var_dump($val);
				}
			}
			
			foreach($array as $key =>$value)
			{
				$ret[$key]=$value;				
			}
						
			return $ret;
		}		
		
		public function reorder_files($file,$files){
			$dir=dirname($file);			
			$order=$this->read_order($dir);
			$files=$this->sortme($files,$order);						
			return $files;
		}
				
		function no_need_check($f)
		{
			if ($f =="." || $f ==".." || $f ==IndexFileName
				|| $f =='index.php' )
				return true;
			return false;		
		}
		
		public function massage($id,$files)
		{
			if (isset($id)==false)
			{
				$id=1;				
			}
			else if (array_key_exists($id, $files) === false){
				$id=key($files);
			}
			return $id;
		}
		
		public function read_file($id,$files)
		{
			foreach($files as $key =>$val)
			{
				if ($key == $id)
				{
					$f=	current($val);
					return current($val);					
				}
			}
			
			if (count($files)==0)
			{
				return WelcomeFilePath;
			}
		}

		public function get_file_name($h,$c,$id)
		{
			$files=$this->read_folder($h,$c);
			$ret=$this->file_exist($id,$files,$filename);
			if ($ret) return $filename;
			return "";
		}

		public function read_folder($h,$c)
		{
			$ret=array();
			$i=1;
			
			if (strlen($h)==0 || strlen($c)==0) return $ret;
			
			$s=RootDir.DataDir.'/'.$h.'/'.$c;
			if (is_dir($s)==false) return $ret;
			//echo $s;
			foreach (glob("$s/*.txt") as $filename)
			{
				$ret[$i]=array(str_replace(".txt", "", basename($filename))=>$filename);
				$i++;	
			}
			
			$order=$this->read_order($s);
		   $ret=$this->sortme($ret,$order);
			//echo "dump from folder_system.php<br/>";
			//var_dump($ret);
			
			return $ret;
		}
		
		public function article_exist($h,$c,$id)
		{
			$files=$this->read_folder($h,$c);
			return $this->file_exist($id,$files);
		}
		
		public function cat_exist($h,$c)
		{
			return false;
		}
		
		public function folder_exist($h)
		{
			foreach($this->menus as $key =>$v)
			{
				if (strcmp($key,$h)==0) return true;	
			}
			return false;			
		}

		public function file_exist($id,$files,&$file="")
		{
			foreach($files as $key =>$val)
			{
				if ($key == $id)
				{
					$file=current($val);
					return true;
				}
			}
			return false;			
		}
	}

?>